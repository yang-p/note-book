块级作用域：
			什么是作用域？
							作用域是变量的作用范围，也叫执行期上下文。
			作用域有哪些？
						在ES5及之前的版本，作用域只有函数作用域和全局作用域。
						在ES6及更高的版本，作用域还包括块级作用域
			块级作用域的特点？
						形如if(){···我就是块级作用域}
						假如上面if语句在全局下，如果花括号里面的变量是用var声明的，
						那么该变量能被全局访问，而用let声明的变量只能在这个花括号里面
						才能访问，并且必须是该变量声明后才能访问，否则会报错。
			怎么让变量的作用域成为块级作用域？
						用let声明变量

——————————————————————————————————————————————————————————————————————————————————————
let命令
		1.具有识别块级作用域的特点
				全局作用域 > if|for(这里面也是一个作用域) > {块级作用域}

		2.同一个作用域里面，不允许重复声明变量
			比如在{}里面，有一个let a = 1; 如果再let a = 2;就会报错，只需要 a = 2;即可。

		3.暂时性死去
			//声明在哪个作用域，该变量就绑定在这个作用域下。
			if(true) {
				alert(a); //暂时性死去开始
				let a = 0; // 暂时性死去结束
			}

		4.变量声明不提升。
					用var声明的变量会变量声明提升，因此在变量声明之前去访问该变量不会报错，
					但是用let声明的变量，只能在声明之后去访问该变量，否则会报'not is defined'。


		5.用var声明的全局变量属于window,但是用let/const声明的全局变量不属于window。
————————————————————————————————————————————————————————————————————————————————————————————
const命令
		1. const声明的变量，称为常量。该常量不可改变，否则会报错。
				这里的不可改变，其实质是用const声明的变量存的是变量值所在的地址，
				不论是堆地址还是栈地址，只要地址不发生改变就可以。
				所以对于复合数据类型，其内部还是可以改变的。

		2.const命令和let命令的用法是一样的。


Object.freeze()		
			赋值一次后，不可改变，哪怕是改变复合属性内部也会报错。
			const arr = Object.freeze([1,2,3,4])




_________________________________________________________________________________________________
变量的解构赋值
		1.变量的左右两边的结构需要保持一致。
			例子：
				let [a,b,c] = [1,2,3]; // a=1,b=2,c=3
				let [a,[b,c]] = [11,[22,33]];
				let {a,b} = { b : 1,a : 2 } // a=2.b=1

		注意点：
				①数组形式的解构赋值，必须保持索引顺序，因为不论是变量的声明还是赋值都是按照
				数组的索引值来的，特别是变量声明时，如果前者变量的默认值是后者变量，那么就会报错，
				因为后者变量还未声明就使用(即，暂时性死去)。
				②对象形式的解构赋值则不需要顺序，只需要key-value对应即可,但是变量声明却是从左到右的。
			    ③当使用对象形式的解构赋值时，有可能会被当做块级作用域，所以需要给大括号外面包裹一个小括号。



		2.结构赋值形式的变量具有默认值。
				变量默认值写在变量名的后面，之间用'='，并且默认的变量默认值为undefined。
				let [a=1,b,c] = [1,2,3]; // a=1,b=2,c=3
				let [a,[b,c]] = [11,[22,33]];
				let {a,b} = { b : 1,a : 2 } // a=2.b=1

				对象形式的解构赋值能保证左右两边对应的原理是，let {a:a,b:b} = {a:1,b:2}。



				注意点：只有当变量对应的右边绝对等于undefined时，变量才会等于默认值。
						发生上面这种情况只有两种，①右边的值为undefined，②右边的解构为'解构失败'。




		3.解构赋值中的'解构失败'。
				例子：
						let [a,b] = [1]; //a = 1,b = undefined;

		4.解构赋值中的'不完全解构'
				例子：
						let [a,b] = [1,2,3] // a=1,b=2;



数组形式赋值注意点：

			右边的属性值也可以是字符串格式，一个变量对应一个字符，并且是依次对应。
			因为字符串有包装类。
			let [a,b,c,d] = 'love'; 

————————————————————————————————————————————————————————————————————————————————————————————
根据数组形式的变量赋值可得出以下应用场景
swap场景：
			交换a和b的值
							let a = 1, b =2;
							[a,b] = [b,a];
							console.log(a,b) ==> 2,1

根据对象形式的变量赋值的应用场景

let xm = {
	age : 18,
	sex : '男',
	name : 'dog'
}

let {age,name,sex} = xm;

			