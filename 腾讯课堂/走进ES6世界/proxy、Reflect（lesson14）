proxy的作用： 代理

proxy的使用：
	let newObj = new Proxy(target,handler);
			target 被代理的对象，当为函数时，触发apply方法进行拦截。
			handler 对代理的对象做什么操作
			new Proxy(obj,{
				get(target,prop){
					//get的作用,获取属性
					//target指的就是obj这个对象，
					//prope指的是obj对象里面的属性和方法
				},
				set(target,prope,value){
					//set的作用，添加或修改属性
					//value指的是设置的属性值
				},
				has(target,prop){
					//has的作用判断对象里面是否有属性或方法
					//外部如何触发该方法： '属性' in newObj

					return prop in target;
				},
				apply(target,contxt,args){
					//apply虽然起拦截函数的作用，但是配合Reflect方法可以使函数执行。
					//target指的是传入的函数体
					//context指的是this指向
					//args指的是函数执行时的实参
					return Reflect.applay(...arguments); //...arguments就是target、context、args
				},
				deleteProperty(target,prop){
					//deleteProperty的作用，删除属性
					//外部如何触发该方法： delete newObj['属性']

					delete target[prop]; //此行代码为该方法的代码
				}
			})



Reflect的使用：

				作用：Reflect是一个对象，它可以映射任何方法，同时可以通过它取到语言内部的任何方法。
				语法： Reflect(调用的函数，this指向，函数的实参)
				

				使用例子：
							function add(a,b){
								return a + b;
							}
							let reflect = Reflect(add,null,[a,b]);
							console.log(reflect(1,2)); //相当于执行了add方法。

				扩展：	{
						见识一下Reflect的强大：
							删除一个属性：
										delete obj.aaa  ===> Reflect.deleteProperty(obj,'aaa')
							判断对象是否有某个属性：
							'bbb' in obj ===> Reflect.has(obj,'bbb')


				}


_______________________________________________________________________
proxy例子：
			问题： 访问obj对象中的name属性，如果有name属性就返回该属性值如果没有就报错。

			let obj = {name:'yp'}

			let prox = new Proxy(obj,{
				get(target,prop){
					if(prop in target){
						return target[prop];
					}else {
						console.warn(`${prop}属性不存在`);
					}
				}
			})