模块化：
		注意点：
				①使用模块化，必须是在服务器环境。
				②import后面的url地址可以是相对路径也可以是绝对路径。
				③使用import导入模块，会出现导入的变量提升，即在import代码上方就可以使用该变量。
				④import只会导入一次某个文件，所以无论用import引用同一个文件多少次都只算一次。
				⑤虽然import只会导入一次，但是当导入的文件的内容发生改变时，导入的时候也会随着变化。
				

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		第一步，定义模块：
						给script标签的type属性命名为'module'。
						<script type="module"></script>

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		第二步，导出模块：	用export关键字导出模块											

				导出模块的两类写法：
						第一类： export {}
									
						第二类：export default {}

						第一类和第二类的区别：
								使用第一类写法，那么在导入模块时，导入的变量需要被{}包裹，
								而使用第二类写法，导入的变量不需要被{}包裹。

				导出模块的几种写法：	

							第一种： export let a = '111'; export default a = '111';
							
							第二种：export {a,b,c}  export default {a,b,c}
							
							第三种：
									export {a as aaa, b as bbb, c as ccc}
									export default {a as aaa, b as bbb, c as ccc}


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		第三步，导入模块：		用import关键字导入模块


				导入模块的两类写法：
							第一类：静态导入 import 'url'
							第二类：动态导入 import ('url')

							静态和动态导入的区别：
										静态导入的语法不能写到if语句里面，因此就不能实现按需加载。
										动态导入可以实现按需加载。
										动态导入可以放在if语句里面。
										动态导入里面的url可以动态改变。
										import()的返回值是一个promise对象，因此可以用promise的方法。


				导入模块的静态写法：	
								第一种：import './index.js'								 
								 该写法仅仅是相当于用script的src属性引入一个js文件而已。			
					
								 第二种：import {a} form './index.js'
								 该写法是将index.js中export的a变量导入进来。

								 第三种：import {a as aaa, b as bbb, c as ccc} from './index.js'
								 由此可得出，不论导入还是导出，都是可以起别名，但是起了别名后
								 原名就失效了，只能用它的别名替代它。

								 第四种：import * as mods from './index.js'
								 将所有export的变量放在一个数组中导入进来，比如有个export的变量a，
								 要想调用a变量，只需要mods.a

								第五种： import a,{b,c} from './index.js'
									导出模块的两类写法混合使用时，导入模块用这种写法。



				导入模块的动态写法：
									第一种： import('./index.js').then(resolve => {})

									第二种：
				Promise.all([import('./index.js'),import('./index1.js')]).then()

									第三种：
										待补充。。。。

