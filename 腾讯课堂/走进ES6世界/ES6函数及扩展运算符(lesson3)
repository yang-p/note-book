扩展运算符
			写法： ...  三个点

...的作用：
			①可以将类数组转化成数组。
			②可以将数组内部的每一个元素展示出来
				let arr = [1,2,3,4];  console.log(...arr); // 1,2,3,4

			③可以将字符串中的每个字符展示出来(包装类)。

			④可以将字符串的每个字符当成数组的每一个元素放在数组中。

			应用场景： 
						①将一个数组的东西push到另一个数组。
						var arr = [1,2,3,4,5], arr1 = [];
						arr1.push(...arr);
						此时的arr1 = [1,2,3,4,5]

						②将数组进行合并。
						var arr = [1,2,3], arr1 = [4,5,6], arr2 = [7,8,9];
						var newArr = [...arr,...arr1,...arr2];
						
						③将字符串拆分成字符，并放在数组中。
						var arr = 'yangpeng';
						var arr1 = [...arr];

————————————————————————————————————————————————————————————————————————————————————————————————
函数参数
	1.有参函数

			ES6中，函数的形参可以有以下两类写法：
				①普通写法：
							function test(a=1,b='yp'){} test(2,undefined)==> a=2,b='yp'
							当形参对应的实参绝对等于undefined时，那么形参的值则使用默认值。

				②结构赋值写法：
								 function test({a=1,b}){}  test({b:2})==> a=1,b=2
								 function test({a,b} = {b:2}) test({a:1}) ==> a=1,b=undefined

			从结构赋值写法可以得出，实参对应的形参不论为什么都会覆盖形参右边的赋值，
			但是如果形参有默认变量值，那么形参对应的实参绝对等于undefined时，。。。。



	2.无参函数

				function test(...args) {console.log(args)} test(1,2,3,4) ==> 执行结果为[1,2,3,4]
				args是arguments进行封装后的一个数组。当形参写成args则只取arguments的第一位实参。

——————————————————————————————————————————————————————————————————————————————————————————————
箭头函数(代表数据的流向)
	箭头函数的写法：
			一行代码的写法：
				var 函数名fn = (形参) => 返回值
			多行代码的写法：
					let fn = (形参) => {
						...代码块
					}

		没有形参和有多个形参的写法：
				() => result1  没有形参，必须用小括号进行占位。
				(part1,part2) => part1 + part2;有多个形参时，也必须用小括号括起来。
						
		有一个形参的写法：
					part1 => result1 只有一个形参，可以不用小括号
					
		返回值为对象的写法：
							var fn = () => ({result1})
							当返回值为对象形式时，必须用小括号括起来。


		函数嵌套的写法：
						var fn = (result2) = fn1 => result2  ==> function fn(result2) {
																	return	function fn1() {
																			return result2;
																		}
																}


箭头函数与普通函数的区别：
				①箭头函数没有arguments，因此只能用扩展运算符...来获取实参。

				②箭头函数不存在this对象，当用this时，比如this.name,它会去找父级的name变量。
				而普通函数，比如某个对象调用该函数，那么this.name,就会在该对象中去找name变量。

				③箭头函数不能当构造函数用
				



————————————————————————————————————————————————————————————————————————————————————————————————
函数的变化
			1.函数参数有默认值
			2.
