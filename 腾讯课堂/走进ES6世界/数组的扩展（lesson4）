ES5新增的循环： 
			for
			while

			arr.forEach() 作用：代替普通for循环
			arr.map() 作用：需要配合return使用，如果没有return那就和forEach一样

			arr.filter() 作用：过滤不符合条件的元素，同样需要配合return使用，当return返回的true
								那么符合条件的元素被返回出来。
								例子：
								arr.filter(function(val,index,arr){return index == 0})
								只有索引值为0时的元素才会被返回出来。

			arr.some()	作用：类似查找，数组里面只要有一个元素满足条件就返回true。
			arr.every() 作用：类似查找，数组里面的所有元素都满足条件才返回true。
						例子： let arr = ['y','a','p','e'];
								arr.some(function(val,index){ return val == 'y' }); //返回的是true。

				以上五种循环的用法都一样：
						arr.forEach(回调函数,希望this指向谁)

			
			arr.reduce() 作用：数组求和、阶乘 
							arr.reduce(function(prev,cur,index,arr) {})
			arr.reduceRight() 作用: reduce是从左到右依次计算，reduceRight是从右到左依次计算。

ES6新增的循环：
				for of
					作用：直接遍历值，而不是数组下标或对象属性。
					for-of循环会向被访问对象请求一个迭代器对象，然后通过调用迭代器对象的
					next方法来遍历所有返回值。

——————————————————————————————————————————————————————————————————————————————————————————————————
ES6数组新增的方法
Array.from()
			作用： 将类数组或可遍历的对象(一般情况下，只要具备length属性的对象)转换成数组。现在一般用扩展运算符

			使用方法：Array.from(obj,function(){})
			注意点：使用Array.from会将一个数组转换成一个新的数组，var arr1 = Array.from(arr);
					arr1 == arr;// 得到的布尔值为false

Array.of() 
			作用：将参数放在一个新的数组中。
					var arr = new Array(1)当只有一个参数，且为数字时，创建的是一个长度为1的空数组。
					而Array.of(1)正好解决了传一个数字参数时，不再作为数组长度，而是数组的元素。

typesof() 
			作用：返回变量的类型

copyWithin() 
			作用：将数组的元素进行复制。
			使用方法：arr.copyWithin( target, start, end=this.length)
						target是数组的索引值，将复制的元素放在target索引位。

fill()
			作用： 填充数组，将一个有长度的空数组填充成某个有数值的非空数组。
			使用方法：var arr = new Array(5);   arr.fill(1,indexStart,indexEnd);
					indexSart表示从该个索引位开始填充，indexEnd表示到该索引位结束填充，不包括该索引位，
					如果indexSart和indexEnd都不写，那就填充整个数组。
				例子：	arr最初是一个长度为5的空数组，但是经过fill方法后数组里面有5个1。


对数组进行遍历的三个方法：
		entries()  遍历数组的索引值和value值
		keys()		只遍历索引值
		values()	只遍历value值
		上面的三个方法遍历后，会返回一个迭代器对象，所以要真正看到数组的索引值、value值还需要for of循环。
		var arr = [2,3,4,5,6,,7];
		for([index, val] of arr.entries()){ console.log(index,val)}
		for(index of arr.keys()){···}
		注意点：如果entries的for of循环中只有一个参数，那么返回的是一个数组，写两个参数必须用[]括起来。x




		includes()  判断数组中是否有满足条件的元素，返回布尔值。

		find()      找到数组中满足条件的第一个数,如果该数组所有元素都不满足条件，那么返回undefined
					arr.find(callback)
					例子： let arr = [1,2,3,4,5];
							let a = arr.find(item => item > 2);
						console.log(a); //结果是 3  (本来大于2的数有三个，但是只返回遍历到的第一个大于2的数)

		findIndex() 找到数组中满足条件的第一个数的下标,如果该数组所有元素都不满足条件，那么返回-1,相当于升级版的indexof()