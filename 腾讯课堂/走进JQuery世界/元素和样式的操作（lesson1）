forEach() ==> .each()
dom.style ==> .css()
onclick   ==>  .click()
addEventListener()==>.on()
innerHTML ==> .html()
innerText==>.text() 		html和text将目标元素里面的所有内容替换掉。
get/setAttribute==>.attr()
$ == jquery == function(){}
———————————————————————————————————————————————————————————————————————————
$()的括号里面能放以下内容： 
 1) css选择器：		首先要有引号，然后css的选择器怎么写，它就怎么写。
 2) 原生js选择dom： $(document.getElementsByClassName('div')[0])。
 3) jQuery对象： 	$($('div'))
 4)null/undefined:		能放基本数据类型的值，不会报错。
 5)selector/context: $('selector','context') selector代表要选择的元素，context代表
 						selector的某个父级元素，当selector存在并且在context中，那么
 						该元素被选择出来。
 6)函数function:	$(function(){}) === $().ready(function(){})
 					注意点：在旧版本中该函数执行是在dom解析完成之后onload事件之前，
 					新版本是在onload事件之后执行。

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
jQuery中的兄弟元素的选择方法：
$('obj:first')		选择兄弟元素中的第一个元素。		
$('obj:last')
$('obj:eq(index)') 	index只能是数字，可以为负数，当为-1时，选择的是最后一个兄弟元素。
$('obj:odd')		选择的是index为奇数的兄弟元素。
$('obj:even')  		选择的是index为偶数的兄弟元素。

.first()
.last()
.eq() 		这三个方法和上面实现的功能对应，里面可以放变量，除了eq方法，对first和last方法无效。

.filter()	$('li').filter(function(index,ele){return index % 2 == 0;}) <==> $('li:odd')。
.not()		$('li').not(function(index,ele){return index % 2 == 0;}) <==> $('li:even')
			not方法和filter方法写法一样，但是功能相反。
			注意点：jQuery使用数组的方法和原生js的数组方法，在形参上顺序是相反的，
					上面的ele可以省略不写，因为函数里面用this就可以代替它。

.has()		$('li').has('span') 将内部有span子元素的li元素选择出来，
			和selector/context类似。
.find()     $('li').find('span') 将li元素内部有span子级元素的span元素选择出来，
			和$('li span')功能相同。
.is()		括号里面写判断条件，一般用来放置css选择器，返回的结果为true/false

.next() 	下一个兄弟元素节点
.prev()		上一个兄弟元素节点
index()     当前元素节点在兄弟元素节点中的索引值,如果是一组元素节点，那么直接返回0。

.get()		返回目标元素的dom结构，
			get(0)可以将jq选择出来的元素转换成原生dom元素，因此可以用原生js方法。
			例子：$('li').get(0) === document.getelementByTagName('li')[0]。

——————————————————————————————————————————————————————————————————————————————————————
jQuery中的父级元素的选择方法：

.parent()  找的是目标元素的直接父级
			括号里面可以有参数，参数为父级元素，若是直接父级元素，则返回直接父级，
			若为其他元素，则返回undefined。

.parents() 以类数组的形式返回目标元素的所有父级，直到根标签html为止。
			括号里面可以有参数，参数为目标元素的某个父级元素，那么就返回该父级元素。

offsetparent() 找离目标元素最近的有定位的父级，如果父级都没有，那么返回html元素，
				不论参数是什么，只返回离目标元素最近的有定位的父级。

closest(selector) 	找离目标最近的祖先节点，即找祖先节点div，但是又不止一个div，
					那么返回离目标最近的一个div。 必须传参数，参数可以是自己。

————————————————————————————————————————————————————————————————————————————————
查看、改变行间样式的方法：
.css() 		css()方法里面必须要有一个参数，并且必须为字符串类型，否则会报错。
			一般第一个参数为属性名，代表查询该元素的该属性，若写的属性是一个
			复合属性，那么它返回的是该属性的所有属性值。
			比如background属性，返回的是rgb格式的颜色、背景定位。。。。。
			.css()方法的用法：
			方法一：$('li').css('属性1','属性值1').css('属性2','属性值2')
			方法二：$('li').css({属性1:'属性值1',属性2:'属性值2',属性3:'属性值3'})

.attr()		针对元素的所有属性。相当于set/getAttrabute。

.prop()		只针对元素特有的属性和属性值。
			该方法相当于$('div').prop('id') === div.id

		prop和attr方法在只要表示状态的属性的区别：
		查看表示状态的属性时，比如checked、selected、disabled等属性。
		attr会判断元素的是否设置了状态属性，如果没设置那么返回undefined，
		如果设置了就返回该状态的属性名。
		prop同样会判断，目标元素是否设置了状态属性，如果没设置则返回false，
		如果设置了则再次判断当前是选用状态还是非选用状态，如果是选用状态则返回true。

		attr返回的是初始状态，prop返回的true/false的实时状态。
		状态属性的属性值无论是什么默认初始状态都是选中状态。	
		attr和prop方法至少传一个参数，并且是字符串类型的，如果不传参数就会报错。
++++++++++++++++++++++++++++++++++
为元素添加、删除类名的方法：
.addClass()  .addClass('类名1 类名2 类名3')当添加多个类名时类名与类名之间用空格隔开。
			 .addClass(function(index){return xxx;})
			 	利用index参数设置条件为某一类的兄弟元素节点设置样式。
			 比如$('li').addClass(function(index){return index%2==0? '类名1':'类名2'})
			 实现了li的索引值为奇数时添加类名2，为偶数时添加类名1。

.removeClass()	和addClass方法用法一样，当removeClass方法的括号为空时，代表清空所有类名。

.toggleClass()  有两个参数，第一个参数为类名，第二个参数为可选参数，为布尔值。
				当只有一个参数时，系统会判断目标元素是否存在要添加的类名，
				若存在，则执行删除操作，若不存在执行添加操作。
				当有两个参数时，第二个参数为false时，不论目标元素是否有目标类名，
				执行删除操作，同理为true时执行添加操作。
—————————————————————————————————————————————————————————————————————————
添加、创建、删除元素
B.before(A) 		A在B的前面
A.insertBefore(B) 	A插入到B的前面

.after()
.insertAfter()	这四种插入方法都是剪切功能，before和insertBefore的功能虽然相同，
				但是返回得目标元素不同，before返回的是B元素，insertBefore返回的是A元素。

B.append(A) 	将A插入到B元素中，并且是插入到B元素中的最后一个子元素后面。
A.appendTo(B) 	都是具有剪切功能

B.prepend(A)	将A插入到B元素中，并且是插入到B元素中的第一个子元素前面。
A.prependTo(B)

$()里面可以写双标签的一部分，当插入到目标元素里面时，系统会自动补全该标签，
若该标签后面有内容，系统不会将他们插入到目标元素里面。
单标签的写法：$('<div></div>')、$('<div>')、$('<div />')

.remove()	
.detach()	这两个方法执行后，都会返回目标的dom元素，
			但是remove方法返回的是不含绑定事件的dom元素，
			detach方法返回的是初始的dom元素(即返不返回绑定事件由该dom元素决定。)
