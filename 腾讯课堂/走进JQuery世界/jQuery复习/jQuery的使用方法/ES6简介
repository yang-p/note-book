作用域：
		在ES6之前只存在两种作用域，函数作用域和全局作用域。


Let命令：
		1.用let命令声明的变量不进行‘变量声明提升’。
			例子：
			  	console.log(a);
				  let a = 1;  由于变量声明不提升，所以报错‘a is not defined’。

		2.let命令声明的变量有块作用域的概念。
			作用域的划分： 全局作用域、if和for等放置条件的括号里面、函数作用域。


		3.在同一层级作用域下，用let声明的变量，不能再进行声明，
		  同时以声明的变量不能再用let声明该变量，否则报错。
			例子：
					var|let a = 1;
					let a = 2;
					----------
					let a = 2;
					var|let a = 1; 这两种例子都会报错。


		4. 只有let声明了变量，才可以使用。

let的使用方法：
				1. 按照var的形式声明变量 let a = 1;
				2.以数组的形式声明变量
						其规则是，左边数组的索引对应右边数组的索引，对应顺序是从左到右，
						每一个索引相当于let声明一个变量。
						let [a,b] = [1,2]; // a = 1, b = 2
						let [a,b] = [1] //此写法称为结构失败，a=1,b=undefined
						let [a,b] = [1,2,3]//此写法称为结构不完整，a=1,b=2
						let [a,[b,[c]]] = [1,2,3] // a = 1, b = 2, c = 3
						let [a] = 1; //报错，应当遵循数组匹配原则。变量放在数组，那么变量值也应该放在数组里面。

				3.
					let [a=1,b=2] = [3,4]//a先对应右边数组的第0位，判断该位的值是否全等于undefined，
										//如果为true那么，a的变量值就为1，为false那么就为3。

				4.以对象的形式声明变量
						let {a,b} = {a:1,b:1}
						let {a} = {b:2} //a = undefined,其实质是在右边的对象里面生成一个a:undefined.
						let {a} = {a:1,b:2}
						let {a,b} = {a:1}




const命令：
			1.const命令声明的变量是一个常量，该常量的值不可改变，否则报错。
			const命令声明变量的实质是，只要不改变变量指向变量值所在的地址就行。
			因此如果该变量是引用数据类型，那么在不改变地址的情况下改变变量值也是可以的。

			2.const声明的变量具有let的特点。