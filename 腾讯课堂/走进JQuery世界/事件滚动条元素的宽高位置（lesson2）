事件的绑定和解除：
.bind()   老版本，由于bind方法绑定在document元素上，所以会从document开始一级一级的寻找
		 绑定了事件的目标元素，非常耗性能，该方法和on方法的用法一样。
    
.on()	该方法绑定在目标元素上。
		on方法的最基本使用方式，.on('事件类型',function(){})
		on的最全格式，.on('事件类型',[事件源对象]，[内容]，处理函数)

		on在addEventListener的基础上实现了事件委托，首先判断点击的位置是否和事件源
		对象的target对应，如果对应那么冒泡到调用该事件的目标元素上，然后执行处理函数。
		例子：$('ul').on('click','li',{name:p},function(e){console.log(e.data.name;)})。

		注意点：事件源对象和内容可以不写，但是若只写三个参数，那么系统会认为第二个参数
		是事件源对象，所以，第三个参数为了和第二个参数区分开来，应写成对象的形式，
		第三个参数被添加到了事件对象的data属性中。

.off()  解除事件绑定 例子：$('ul li').off('click mouseenter mouseleave')。

.one()  事件只执行一次，和on方法的使用一样，相当于on和off方法的结合。

其他方法句柄(待补充)：
					.click() 			点击事件
					mousedown() 		鼠标按下
					mouseup()   		鼠标抬起
					mouseover()        	鼠标经过
					keydown()    		按下键盘上的键
					keyup()				键盘按键抬起
					contextmenu() 		鼠标右键菜单
					focus()				聚焦事件
					blur()				失焦事件

+++++++++++
事件注意点：
			一个事件分为两个步骤：先注册/绑定、再触发执行。
			事件绑定发生在dom文档加载的过程，并且事件绑定只执行一次。
			因此以后添加在dom结构中的元素将不能触发原本绑定好的事件，因为执行事件绑定的时候没有绑定在它身上。
			所以要想让添加进来的元素能正常使用原本绑定好的事件，就需要用到事件委托机制。

事件的绑定在dom加载时完成，事件执行在触发该事件类型时执行。
比如$('li').click(...)在dom加载到li元素时，将click事件在document对象中进行注册。
——————————————————————————————————————————————————————————————————————————————
事件对象
	鼠标位置：
			e.pageX    以document文档区为参照物，document == 浏览器可视窗口 + 滚动条。
			e.clientX  以浏览器的可视窗口为参照物，当打开控制台，控制台所占的位置不算可视窗口。
			e.screenX  以当前屏幕为参照物，宽高还涉及到了屏幕分辨率。

	鼠标按键：
			e.button   适用于IE，和e.which功能相同，但是鼠标左键返回0滚轮返回1，右键返回2。
			e.which	   返回某个按键或按钮的number值，比如鼠标左键返回1滚轮返回2右键返回3。
			以上两个方法，一个是IE、一个是网景的，现在的标准是which方法。

	取消默认事件：
					e.preventDefault() 				
					例子：取消右键菜单事件。
					$('document').on('contextmenu',function(e){e.preventDefault();}) 

	取消冒泡和捕获事件：
						e.stopPropagation()
							
	阻止默认事件冒泡和捕获事件以及终止代码：
											return false;
							
——————————————————————————————————————————————————————————————————————————————
滚动条
	.scrollTop() 	滚出去的高度:$(window).scrollTop()
	.scrollLeft()	滚出去的宽度：$(window).scrollLeft()
	注意点：上面的代码必须放在函数里面才有效$(window).scroll(function(){XXXXX})

获取元素的宽高：
	.innerWidth() 元素的宽度为 内容宽度+padding宽度
	.outerWidth() 元素的宽度为 内容宽度+padding宽度+border宽度
	.outerWidth(true) 元素的宽度为 内容宽度+padding宽度+border宽度+margin
	.width()   获取元素的宽度 例子：$('div').width() + 'px' === $('div').css('width')
	.height()   获取元素的高度。
——————————————————————————————————————————————————————————————————————————————
获取元素的当前位置：

.offset().left/top 	 以文档为参照物。
.position().left/top 以最近的有定位的父级为参照物，如果没有那么就以文档为参照物。


