在React组件中，组件的属性只是一个只读状态。
而要改变组件的属性，只能通过state状态属性改变。
但是函数定义的组件没有状态，只有类定义的组件才有。

state  			该对象里面的属性都是有状态的

setState({},callback)    改变有状态的属性时，可以让视图也随着更新。
						第一个参数是一个对象，第二个参数是当状态设置成功后触发的回调函数。




————————————————————————————————————————————————————————————————————————————————————————
下面以一个‘点击按钮实现页面数字加1’小demo为例：

let {Component} = React;
class MyComponent extends Component {
	consructor(props){
		super(props);
		this.state = {
			count : 0
		}
	}
	fnClick(){
	let oldCount = this.state.count;
		this.setState({
			count : oldCount + 1
		})
	}

	render(){
		return (<div>
                <p>{this.state.count}</p>
                <button className="add" onClick={this.fnClick.bind(this)}>加法</button>
                </div>)
	}
}


ReactDOM.render(<MyComponent/>,document.getElementById('root'));


——————————————————————————————————————————————————————————————————————————————————————
总结注意点：
			1.给某个元素加事件时，要特别注意this指向问题。
				解决方案是，加bind(this)，比如 onClick = {this.fnClick.bind(this)}

			2.在react中，用++运算符不靠谱，应该替换成+1

			3.在改变状态之前，应该先将老的状态取出来存在变量里面。---养成好的习惯。