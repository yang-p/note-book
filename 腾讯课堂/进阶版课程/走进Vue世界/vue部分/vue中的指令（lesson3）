Vue指令的作用：
				操作dom

指令的写法：
			v-指令名字:指令参数 = '指令的表达式'
			v-指令名字 = '变量/表达式'
——————————————————————————————————————————————————————————————————————————————————————————

v-bind
		作用：将js代码(Vue实例对象中的属性和方法)输出到html模板中

		用法：
				Vue实例对象中有一个href属性，属性值为'http://www.baidu.com'。
				<a v-bind:href='href'></a>


v-on
		作用：绑定事件
		语法： v-on:js原生事件类型 = '事件函数|表达式'
		事件源对象：
					事件函数调用不传任何参数时，事件源对象会自动注入事件函数中，
					显示的写事件源对象，$event，。并且放在所有参数最后面。


v-model
		作用：实现双向数据绑定
		     (双向绑定就是js中的数据传给html模板，操作dom改变模板中的数据，然后又反向传给js)

		     该指令相当于v-bind 和v-on的结合体，
		     v-bind负责将js中的数据传给html模板，
		     v-on负责监听操作dom,然后将模板中改变的值传给js。

		用法：  v-model = 'value'


v-html
		作用：由于{{}}输出的变量是字符串，所以想要自己添加dom节点到html模板中是不会被渲染的，
				因此v-html的作用就是将dom节点渲染到html模板中。

		用法：
				<div v-html = 'html'></div>

		注意点：
				使用该方法向html模板添加dom节点，很容易遭到攻击

v-once
		作用：给html模板中的某个元素设置该指令后，其内容只会渲染一次。

		用法：
			<div v-once>
				{{var1}}  //不论外部怎么改变var1的值，var1只显示初始值。
			</div>
——————————————————————————————————————————————————————————————————————————————————————————————
条件渲染指令
			条件渲染实现原理分为两种：
								第一种:
										只渲染满足条件的dom节点
								第二种:
										所有节点都渲染，但是满足条件的dom节点dispaly:blick;
										不满足条件的display:none;


v-if

v-else-if

v-else
			三个条件指令结合的例子：
						<p v-if='a>10'>a大于10</p>
						<p v-else-if='a>1'>a大于1</p>
						<p v-else>hello</p>

			上面的例子是一个条件指令对应一个dom节点，当一个条件指令对应朵儿dom节点时，
			两种写法：
				用将要渲染的节点包裹，但是会将div渲染出来
						<div v-if='1===1'>
							<h1>hello</h1>
							<p>world</p>
						<div>

				用template标签将要渲染的节点包裹起来，而template不会被渲染出来。
						<template v-if='1===1'>
							<h1>hello</h1>
							<p>world</p>
						</template>

			

		注意点：
				1、这三个条件指令必须放在兄弟节点；
				2、假如有一个v-if指令，两个v-else-if指令，那么当不满足v-if指令时，
				   系统找的是最近的一个v-else-if指令。

				3、上面三个条件渲染指令的渲染原理是第一种。


v-show
		作用：同样是条件渲染指令，只不过渲染原理是第二种

v-block
		作用:设置了v-block指令的dom节点的内容，如果有js变量未被渲染成html的内容，
			 那么该属性就会一直存在，当该节点里面的js变量被渲染后，该属性消失。

		用法：
				配合css样式，在css中选中属性 [v-block] {。。。。。}


——————————————————————————————————————————————————————————————————————————————————————————
列表渲染指令

v-for
		作用：循环数组中的元素展示到页面中

		用法：
				循环数组的写法：
				<div v-for='(value,index) in array'>{{value}}</div>

				循环对象的写法：
								<div v-for="(value,prop,index) in obj"></div>
								value是属性值
								prop是属性
								index是

				循环数字的写法： 从1遍历到当前数字,且数字必须是正整数。

				循环字符串的写法： 把字符串中的字符进行遍历



		注意点：
				1、添加了v-for属性的html元素,其子元素也会跟着循环。

				2、v-for循环某个数组后，当该数组的某个元素被改变了，v-for循环并不会重新渲染，
				   因为数组的引用地址没变，并且索引也没变，所以不会触发视图更新。

				3、通过 Vue.set()方法，可以解决第二个注意点。
				4、通过数组的push、reverse等其他数组的方法，都可以解决第二个注意点，
				   因为这些数组的方法被Vue重写了，使用了观察者模式。

				5、给设置了v-for指令的元素，添加key属性，并且key的属性值为独一无二的。


Vue.set()方法的使用：
					Vue.set(target,key,value);

					target可以是数组或对象
					当target是数组时，key为索引值，value为该索引值要设置的值。
					当taget为对象是，key为属性，value为该属性对应的所要设置的属性值。