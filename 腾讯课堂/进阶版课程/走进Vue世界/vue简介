目前前端三大主流框架对比：

	angular 
			由Google团队开发，其框架的思想很好，比如依赖注入，
			但是由于其API经常改动，使得别人使用该框架时有顾虑。
	react   	
			由fackbook团队开发，其虚拟dom思想很好，大大提升了渲染页面的速度，
			但是不好的是html和css都写在了js里面，因此有新的语法，学习成本大。

	Vue     借鉴了react和angular的思想，并进行了优化。学习成本低。


Vue的核心：
			数据绑定、组件式的开发。
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
使用VUe：
		1. 通过script标签引入vue
		2.实例化Vue对象 new Vue()
		3.传参数,参数为对象形式  new Vue({})


<script>
var ve = new Vue({
	el : '#demo', //假设页面中有一个id为demo的div标签，那么通过这个属性，使得该div里面的所有
				//html元素成为html模板

	data : {    // data对象放置属性
			msg : 'hello word' //在id名为demo的div里面，写上 {{msg}} ,那么msg的内容就会被渲染在页面上。
							// 双花括号里面的msg并不是data对象的msg属性，而是Vue构造出的对象本身就有一个
							// msg属性。
	},
	methods : { //methods对象放置方法，该对象里面不能用箭头函数定义一个方法，因为涉及到this指向问题。
			test : function () { // test方经过vue底层处理，该放在已经被放在了Vue的实例化对象中了。
					return this.msg;   //this指的是Vue的实例化对象ve，要想得到data对象的属性必须用this。
			}	
	}	
})

</script>





++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		不论是data对象中的属性，还是methods对象中的方法，经过Vue底层一系列的处理，将这些方法和
		属性全部都放在了实例化对象中。

{{}}    用于输出data对象里面的数据，双花括号里面可以放变量、简单的表达式(算数表达式，三目运算)、函数。

v-bind:  在html模板中，属性的属性值一定是字符串，vue不会解析字符串的属性值。
		 通过v-bind绑定属性，让vue解析其字符串形式的属性值。
		 典型例子就是a标签，<a v-bind:href = "url"></a>   url是data对象自定义的一个属性。



+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
vue指令写法：		v-指令名字 : 指令参数 = 指令表达式 

	v-bind指令  v-bind:元素的属性 = "vue对象中的变量或方法"	       
		例子：	<a v-bind:href = "url"></a> 将url变量绑定到href属性上。

	v-on指令    v-on:事件类型 = "回调函数(vue对象中的方法)"
		例子:	<button v-on:click = "callback()"></button>
				注意：
					  1.如果没有传参数的需求，那么直接写一个callback就行。
					  2.如果callback的形参中的第一个形参没有对应的实参值，
					  并且callback执行时没加小括号，那么vue会自动将事件源对象注入给第一个形参；
					  但是callback执行时加了小括号，那么第一个形参的值对应的是undefined。

		传入事件源对象，  $event是vue定义的专门用来接收事件源对象的关键词。它可以和其他实参共存。

		事件修饰符：    (作用：只有满足了修饰符，事件才能有效。  修饰符可以链式调用。)
					stop     作用：阻止事件冒泡   v-on:click.stop = ""
					prevent  作用：阻止默认事件   v-on:click.prevent  或 v-on:click.prevent

		按键修饰符：			
					enter或13    作用：只有点击enter键才有效  v-on:keyup.enter = "" 或v-on:keyup.13 = ""。

					关于键盘上的大部分按键，既可以写成该键在事件源对象中对应的数字，也可以写该键的英文名称。
					shift     作用：该键直接按没有效果，需要配合其他任意按键或鼠标按键。
					meta    作用：该建直接按没有效果，在不同电脑系统是不同的键，比如在window系统是菜单键。



		