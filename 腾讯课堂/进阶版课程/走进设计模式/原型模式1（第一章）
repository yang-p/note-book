
什么是原型模式：
				既是一种设计模式，也是一种编程泛型，其核心是通过原型思想实现面向对象系统。

原型模式如何创建对象：
 					  原型是通过克隆来创建对象的

通过克隆创建对象的方法：
						ES5中，用Object.create方法克隆对象。该方法的效率比构造对象的方法低。
						除了Object.prototype(null)创建出来的对象和Object.prototype对象没有原型外，其他对象都有原型。

克隆对象的兼容性写法：
					  Object.create = Object.create || function (obj) {
															var F = function () {};
															F = obj;
															return new F();	
														}				  
	
从设计模式来讲，原型模式的意义并不大，但是对于JavaScript来说，这是一门基于原型构造出来的面向对象系统的语言。

原型的继承：
			基于原型链的委托机制。	

原型泛型编程的特点：
					1. 基本上所有的数据都是对象
						基本数据类型中除了undefined，可以通过包装类的形式变成对象，
						JavaScript中有一个根对象Object.prototype，其他对象都是以它为原型克隆而来的。

					2. 	要得到一个对象，不是通过实例化一个类，而是以某个对象作为原型，进行克隆。
						在JavaScript语言中，克隆对象是隐式的，是系统内部实现克隆过程的，比如var obj1 = new Object()、obj2 = {}，
						这两种都是以Object.prototype对象为原型的。

					3.  克隆出来的对象和原型一样
						对象没有原型，而是他的构造器有原型
						对象有一个隐藏属性_proto_，它会指向构造器的原型对象，因此它是对象和构造器原型对象联系的纽带。
						因此可以通过这里改变一个对象的原型指向，比如 obj._proto_ = XXX.prototype;
						
					4. 如果克隆出来的对象无法响应某个请求时，它会将这个请求委托给自己的原型。
						 当请求某个对象的属性时，引擎会遍历该对象，如果没找到该属性，那么通过该对象的_proto_属性从它的构造器原型上找。
						 继承总是发生在对象和对象之间。

JavaScript的函数：
					函数并不是一个类，它可以是一个普通函数被调用，也可以是当new该函数时被当做构造器被调用，俗称构造函数。



用new运算符创建对象：
					先仍然是以Object.prototype对象为原型进行克隆，然后在进行其他操作的过程。