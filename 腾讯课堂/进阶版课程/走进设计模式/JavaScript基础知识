编程语言按照数据类型大体分为两类: 静态语言、动态语言。

利用鸭子类型(不论对象是什么，只要它能够符合某个特性就行)思想，就能够实现面向接口编程，而不是面向实现编程。

+++++++++++++++++++++++++++++++++++++多态++++++++++++++++++++++++++++++++++++++++++++
JavaScript中的多态：
					同一个操作，作用于不同的对象，这些对象反馈出不同的信息。

					多态的表现是实现众多设计模式的目标，而通过继承是实现多态的最常用手段。

					多态的最根本作用是，不必考虑对象的类型，而可以直接调用对象的行为。

对象的多态性提示我们："做什么"和"怎么去做"是可以分开的，‘做什么’是对象的行为，‘怎么去做’是一个函数，专门用来调用对象的'做什么'这个行为。

继承的两个种类：
				接口继承
				实现继承:
						 在静态语言中，写一个抽象类，作为父类，其他类继承该抽象类，此时当其他类实例化对象时，对象类型都是该抽象类。
						 在动态语言中，由于不必考虑对象的类型，所以多态与生俱来的。

+++++++++++++++++++++++++++++++++++++封装+++++++++++++++++++++++++++++++++++++++++++++

封装的目的：
			将信息隐藏

封装什么：
		 封装数据、封装实现、封装类型、封装变化	
		 封装数据：
		 			通俗来讲就是设置访问权限
		 			在静态语言中，用public、private等关键字来设置访问权限，
		 			在动态语言中，通过变量的作用域实现封装，并且只有public和private的权限特性。
		 封装实现：
		 			封装使得对象内部的变化，对其他对象是透明的，通俗来讲，用户只关心对象实现功能，而不关心对象内部怎么实现该功能的。

		 封装类型：
		 			在JavaScript中，不需要对类型进行封装。

		 封装变化：
		 			将可变的部分封装起来，提改了可维护性，并且不变的部分形成了可复用性。