正则表达式的创建方法：
				1.字面量形式 let reg = /规则/属性
				2.new实例化对象 let reg = new RegExp('规则','属性')

正则表达式的三个属性：
					i 不区分大小写
					g 执行全局匹配
					m 执行多行匹配
				三个属性的用法：可以同时使用，并且同时使用时不区分先后顺序。

——————————————————————————————————————————————————————————————————————
正则表达式的规则：

1.匹配明确的字符
				let reg = /abc/g;

2.匹配某种类型的字符

		1).表达式[]、()
			一个表达式[]、(),只匹配一个字符。
			[19]表示满足1或9这两个字符的任意一个即可。
			[1-9]表示满足1-9之间的任意一个数字即可。
			[^1]表示满足不是数字1的任意字符即可
			(1|9)表示满足1或9这两个字符的任意一个即可。

		2).元字符
			\w  [0-9A-z]
			\d  [0-9]
			\b  匹配单词边界
			\s  匹配空白字符




