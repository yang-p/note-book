曾经的浏览器对网页的加载机制：
               在未加载body标签之前，网页不进行任何渲染，即一片空白，
               在下载外部引入的js文件时，先下载第一个外部js文件接着解释执行完后，
               才会继续第二个外部js文件的下载和执行。
               而下载和执行script标签中内容的这段时间就成了影响用户体验的一个关键。
        【脚本阻塞】：script标签的下载和执行时，页面的其他进程会被停下来等待script标签执行完后才能继续。
较老的浏览器改进：
          允许script标签并行(同时)下载，但是仍然存在脚本阻塞，因为script标签还没执行。
          解决办法：①尽可能将script标签放在body底部，减少对整个页面下载的影响。②一个页面尽可能减少script标签的使用。
          减少script标签的另一个好处是减少HTTP请求的性能负担，比如下载一个100kb文件比下载四个25kb文件快得多。

 进一步改进：
            对HTTP请求的改进，使用打包工具将多个script标签打包成一个script标签，并且将它放在body标签底部。

________________________________________________________________________________________________________________________
非阻塞脚本(Nonblocking script)
  非阻塞脚本在于页面加载完后再加载JavaScript代码，从技术角度讲就是window的load事件发出之后开始下载代码。
  实现上面这种效果的几种方法：
  ①延期脚本(Deferred Scripts)
     html4中script标签扩展的一个defer属性，该属性指明元素中包含的脚本不修改DOM，因此代码可以稍后执行。
     带有defer属性的script标签可以放在文档的任何位置，当解析script标签时，脚本文件会【并行】下载，
     直到DOM加载完后才开始执行(load事件句柄处理之前)，即比有onload事件的script标签先处理。
     内联脚本有defer属性，在DOM未加载完前也不会执行。
     但不是所有浏览器都支持该属性，所以当浏览器不支持时，以默认处理方式处理script标签时，仍会出现阻塞现象。
  ②动态脚本元素
      var script = document.createElement('script');
       script.type = "text/script";
       script.src = "file.js";
       document.getElementsTagName('head')[0].appendChild(script);















