   typeof(数据)/ typeof 数据      判断数据的数据类型，typeof返回的都是字符串
           输出结果类型有：number、string、boolean、 undefined、object、function。
   注意点：
         ①typeof里面的数据是null，输出object，虽然null属于原始值，
          但是系统会认为它是给对象占位置用得，历史遗留问题。
        ②typeof里面的数据是未声明的变量，控制台不报错，
         输出undefined，这也是未声明变量唯一不报错的地方。
————————————————————————————————————————————————————————————
类型转换
  显示类型转换:
     Boolean() 除了0 、null 、undefined 、false 、""、 是false，其他都是true
     Number(mix) undefined和只要有非数字(除了‘- +’)的字符串结果都为NaN,
     parseInt(String ,[radix])
           null、undefind、boolean的值为NaN。
           radix参数：代表当前数据当前哪种进制数，并将该数据转换成十进制数。
                      radix范围为2-36.
           当没有radix参数时：
        系统默认为是十进制。纯字符的字符串、以非数字开头的字符串返回的是NAN。
        parseInt方法只能正常转换纯数字和以数字开头的字符串。
        parseInt方法从数字开始取直到小数点或非数字位结束。

           当有radix参数时：
    当不属于十进制时，若数据为number或纯数字字符串，会将该数据转换成十进制数；
    当大于十进制数时，纯字符的字符串、以非数字开头的字符串会先转换成ascii码然后转换成十进制数。

     parseFloat(String)
           和parseInt相似，只是在数字和非数字的串中，从数字开始直到第一个小数点后一数字位结束。
     String(mix)        任何数据类型都能转换成字符串。
     toString([radix])  undefined和null没有toString方法。
           radix参数：将十进制数转换成当前进制数。
           当数据为数字类型时，radix的作用是将数据a转换成radix当前值的进制数的字符串。
————————————————————————————————————————————————————————
隐式类型转换
————————————————
内部用Number()进行转换集合
          isNaN()               判断数据a转换成数字类型后是否为NaN。
          ++/-- 自增、自减     无论自增自减放前面或后面都是先进行Number(数据a)
                                转换,再进行表达式的运算。
  正负、-、*、/ 减、乘、除    判断数据是数字还是NaN，若为数字则正常计算，若为NaN则直接输出NaN。
         > 、< 、>= 、<=        字符串和数字比较，则用Number()转换成数字。
                              字符串和字符串比较则用ascii代码比较
                                        当1>2>3... 这种一个表达式中有多个比较运算符连写时，逐个判断，
                                        true或false的个数为偶数则表达式为true，反之为false。
————————————————
内部用String进行转换
           +   加法             当加号两侧只要有一个为字符串，先进行string类型转换。
                                应用：将其他类型的数据加上一个空串就能变成字符串。
                                注意：当作为打印输出时，即使是纯数字的字符串与数字相加也还是做连接作用。
————————————————
内部用boolean()进行转换集合
          &&/||/! 与、或、非   判断的时候对数据进行布尔值转换，但是输出结果是原值或表达式结果。
          ==、!=               数字相同的字符串和数字比较，为true, 1 == true和0 == false成立,
                               NaN == NaN 不成立，哪怕是不进行类型转换的"绝对等于"在NaN面前也没用，
                               这是唯一一个不等于任何东西的————非数。
                                                            
 注意点：undefined和null能转换成number类型，但是他们两个就是不能和数字作比较，因为比较的时候，他们不进行隐式类型转换。  
                              undefined == null 两者能相等是系统内部进行的是布尔类型转换。
———————————————
不发生类型转换
          === / !==  绝对等于、绝对不等于
                    对于原始值来说，表面上一模一样就绝对等于，否则就绝对不等于, 但是NaN === NaN 为false
          注意点：当引用值相比时，它们比的是引用地址，只要地址相等，绝对等于也成立。
