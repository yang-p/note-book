ES的数据类型
          原始类型(值存在栈内存中): Number、String Boolean、undefined、null
                        charAt(index)返回该index所在的字节，charCodeAt(index)返回该index所在字节的Unicode值。
                        undefined和null不能和数字进行比较。
          引用类型(值存在堆内存中): Object、Function、Array、Date、Math、RegExp ...
______________________________________________________________________
堆(heap)和栈(stack)
       栈内存：
       将栈当做一栋房子，房子里面有很多房间，此时的房间名为系统定义的二进制数字，
       当声明一个变量(变量声明永远在栈中，与赋的值无关)时栈为它分配一个房间，房间名为变量名，
       当未赋值时，房间里面系统默认放undefined，当变量赋原始类型值时，房间内放该原始值，
       当变量赋引用类型时，房间内放置该引用值在堆中的地址。
       栈的特性:先进去的东西后出来，后进去的东西先出来。

       堆内存：
       堆内存也可以看做一个房子，堆内存的房间放的是引用类型的值的集合，而指向该房间的地址存放在栈内存的房间里。

       原始值具有不可改变的特性：
       比如将一个原始值放在一个房间里时，该值就不能再取出来了，
       除非栈内存满了，它的值就会被新的值覆盖，这种方式称为形成二次覆盖。
       若栈内存没满，当一个变量再次赋值时，该变量就会脱离原来的房间，去占据下一个房间，并把新赋的值放进去。
       旧值的房间名就再次变成了栈内存的一串标准数字。

       栈内存中赋值属于拷贝: 拷贝的是一个原始值或引用地址。
————————————————————————————————————————————————————————————
克隆(clone)
 浅层克隆 变量为原始值类型，克隆方法为直接赋值，如 var a = 0； var b = a;
 深度克隆
         ①判断一个对象的属性是原始值还是引用值，若为原始值则直接克隆
         ②判断该对象的属性是数组类型还是对象类型，是数组则先建一个空数组，是对象则先建一个空对象；
         ③在第二步基础上，判断子属性是引用值还是原始值，若为原始值则和①一样。
         ④当为引用值是重复第②步，用递归方法。

 function deepClone(oragin,target){
     var target == target || {}, //当不传target实参值时，用空对象代替
         toStr = Object.prototype.toString,//用于判断元素是数组还是对象的方法。
         arr = "[object object]";
         for(prop in oragin){ //用for in循环数组或对象中的元素
         //过滤掉oragin的原型上面的属性
         if(oragin.hasOwnProperty(prop)){
         //判断该变量typeof类型是object并且不能为null值
         if(oragin[prop] !== "null" && typeof(oragin[prop]) === 'object'){
          //判断该变量中的元素是数组类型还是对象类型
         target[prop] = toStr.call(oragin[prop]) == arr  ? {} : [];
           deeClone(oragin[prop],target[prop]);//递归方法，循环遍历元素的后代元素，当后代元素为原始值类型则开始返回
         }else{target[prop] = oragin[prop]}//元素为原始值时，直接克隆
         }
}


  }

















































